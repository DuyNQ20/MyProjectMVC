// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProjectMVC.Data;

namespace MyProjectMVC.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTocken");
                });

            modelBuilder.Entity("MyProjectMVC.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 4, DateTimeKind.Unspecified).AddTicks(4246), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 4, DateTimeKind.Unspecified).AddTicks(4259), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 4, DateTimeKind.Unspecified).AddTicks(4635), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 4, DateTimeKind.Unspecified).AddTicks(4644), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            ProductId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 0, DateTimeKind.Unspecified).AddTicks(5999), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 0, DateTimeKind.Unspecified).AddTicks(6025), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Xanh"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 0, DateTimeKind.Unspecified).AddTicks(6063), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 0, DateTimeKind.Unspecified).AddTicks(6067), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Đỏ"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Delected");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("ProductId");

                    b.Property<string>("content");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 3, DateTimeKind.Unspecified).AddTicks(1858), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Delected = true,
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 3, DateTimeKind.Unspecified).AddTicks(1871), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            ProductId = 1,
                            content = "Nội dung bình luận 1 cho iphone"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 3, DateTimeKind.Unspecified).AddTicks(1926), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Delected = false,
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 3, DateTimeKind.Unspecified).AddTicks(1926), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            ProductId = 1,
                            content = "Nội dung bình luận 2 cho iphone"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Extention");

                    b.Property<string>("Hash");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Module");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<int>("ProductId");

                    b.Property<long>("Size");

                    b.Property<DateTime>("UploadedAt");

                    b.Property<string>("UploadedBy");

                    b.Property<string>("Url");

                    b.Property<bool>("thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("File");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 4, DateTimeKind.Unspecified).AddTicks(94), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Extention = ".png",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 4, DateTimeKind.Unspecified).AddTicks(107), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "iphonex",
                            Path = "images\\smartphone\\iphonex.png",
                            ProductId = 1,
                            Size = 0L,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            thumbnail = true
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("ColorId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Decriptions");

                    b.Property<int>("Inventory");

                    b.Property<bool>("IsNew");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<decimal>("OriginalPrice");

                    b.Property<int>("ProductCategoryId");

                    b.Property<decimal>("SalePrice");

                    b.Property<string>("Specifications");

                    b.Property<int>("StatusId");

                    b.Property<int>("SupplierId");

                    b.Property<int>("VendorId");

                    b.Property<int>("View");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VendorId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            ColorId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 2, DateTimeKind.Unspecified).AddTicks(6030), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Decriptions = "Cuối cùng iPhone X cũng đã ra mắt trong sự kiện diễn ra rạng sáng nay (13/9) theo giờ Việt Nam. </br>Đây là sản phẩm được Apple tung ra để kỷ niệm 10 năm iPhone.",
                            Inventory = 1000,
                            IsNew = true,
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 2, DateTimeKind.Unspecified).AddTicks(6047), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "IPhone X",
                            OriginalPrice = 20000000m,
                            ProductCategoryId = 1,
                            SalePrice = 25000000m,
                            Specifications = "Nhà sản xuất:Apple </br>Hệ điều hành: iOS 11 </br>Kích thước:	143,6 x 70,9 x 7,7 mm </br>Trọng lượng: 174g </br>Ngày giới thiệu:	13 / 09 / 2017",
                            StatusId = 1,
                            SupplierId = 1,
                            VendorId = 1,
                            View = 500
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            ColorId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 2, DateTimeKind.Unspecified).AddTicks(6598), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Decriptions = "Cuối cùng iPhone X cũng đã ra mắt trong sự kiện diễn ra rạng sáng nay (13/9) theo giờ Việt Nam. </br>Đây là sản phẩm được Apple tung ra để kỷ niệm 10 năm iPhone.",
                            Inventory = 1000,
                            IsNew = true,
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 35, 2, DateTimeKind.Unspecified).AddTicks(6607), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Samsung X",
                            OriginalPrice = 20000000m,
                            ProductCategoryId = 1,
                            SalePrice = 25000000m,
                            Specifications = "Nhà sản xuất:Apple </br>Hệ điều hành: iOS 11 </br>Kích thước:	143,6 x 70,9 x 7,7 mm </br>Trọng lượng: 174g </br>Ngày giới thiệu:	13 / 09 / 2017",
                            StatusId = 1,
                            SupplierId = 1,
                            VendorId = 1,
                            View = 500
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int?>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(2859), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(2893), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Điện thoại"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(2919), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(2923), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Ipad"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(2927), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(2927), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Laptop"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Role", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            ConcurrencyStamp = "ed2b50fa-82d1-4ef9-a638-4e80ea248e45",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(5173), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(5181), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Xuất bản"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(5202), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(5207), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Chưa xuất bản"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Info");

                    b.Property<string>("Logo");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 990, DateTimeKind.Unspecified).AddTicks(8623), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Info = "Thông tin apple",
                            Logo = "Logo Apple",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 994, DateTimeKind.Unspecified).AddTicks(6793), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 994, DateTimeKind.Unspecified).AddTicks(8948), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Info = "Thông tin samsung",
                            Logo = "Logo Samsung",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 994, DateTimeKind.Unspecified).AddTicks(8961), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Samsung"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .HasName("UserNameIndex");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdd4f343-7d35-492d-bc98-0339aece7aa0",
                            Email = "quangduy@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "test"
                        });
                });

            modelBuilder.Entity("MyProjectMVC.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Vendor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "Địa chỉ Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(627), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Email = "hoangha@gmail.com",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(640), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "Hoàng Hà Mobile",
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "Địa chỉ Cầu giấy",
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(674), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = "Quang Duy",
                            Email = "Cellphones@gmail.com",
                            ModifiedAt = new DateTimeOffset(new DateTime(2019, 3, 3, 20, 55, 34, 998, DateTimeKind.Unspecified).AddTicks(678), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "Quang Duy",
                            Name = "CellPhone S",
                            Phone = "0123456789"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyProjectMVC.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyProjectMVC.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProjectMVC.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyProjectMVC.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProjectMVC.Models.Cart", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProjectMVC.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProjectMVC.Models.Comment", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProjectMVC.Models.File", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Product", "Product")
                        .WithMany("Files")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProjectMVC.Models.Product", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProjectMVC.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProjectMVC.Models.Status", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProjectMVC.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProjectMVC.Models.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProjectMVC.Models.ProductCategory", b =>
                {
                    b.HasOne("MyProjectMVC.Models.Supplier")
                        .WithMany("ProductCategories")
                        .HasForeignKey("SupplierId");
                });
#pragma warning restore 612, 618
        }
    }
}
